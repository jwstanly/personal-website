# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  website

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Huge thanks to Ryan Yost. Check out his repo...
# https://github.com/ryanjyost/react-spa-starter
Parameters:
  DomainName:
    Type: String
    Description: The DNS name of an existing Amazon Route 53 hosted zone e.g. react-spa-starter.com
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  AcmCertificateArn:
    Type: String
    Description: the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.
    AllowedPattern: "arn:aws:acm:.*"

Globals:
  Function:
    CodeUri: sam/.
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 180
    Environment:
      Variables:
        BLOG_TABLE: !Ref PersonalWebsiteTable

Resources:
  PersonalWebsiteApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: The default usage plan for this API
          Throttle:
            BurstLimit: 100
            RateLimit: 50
      Cors:
        AllowMethods: "'DELETE,GET,OPTIONS,POST'"
        AllowHeaders: "'Accept,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Forwarded-For'"
        AllowOrigin: "'*'"
        # MaxAge: "'600'"
        # AllowCredentials: True
      Domain:
        DomainName: !Join ['.', [api, !Ref DomainName]]
        CertificateArn: !Ref AcmCertificateArn
        EndpointConfiguration: EDGE

  PersonalWebsiteTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PersonalWebsite
      AttributeDefinitions:
        - AttributeName: PartitionKey
          AttributeType: S
      KeySchema:
        - AttributeName: PartitionKey
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # LambdaLibs:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: lambda-layer-lib
  #     Description: Dependencies for the lambda functions, seperate from the react frontend
  #     ContentUri: lambda-lib/.
  #     CompatibleRuntimes:
  #       - nodejs14.x
  #   Metadata:
  #     BuildMethod: makefile

  GetArticleByTitleLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/blogLambdas.getArticleByTitle
      Description: Get the blog article given its URL encoded title
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog
            Method: GET
  
  UpsertArticleLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/blogLambdas.upsertArticle
      Description: Upsert a blog article
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog
            Method: POST
  
  DeleteArticleLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/blogLambdas.deleteArticle
      Description: Delete the blog article
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog
            Method: DELETE 

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket, /*]]

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
    - Bucket # don't create cf distribution until S3 Bucket has been created
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to S3 bucket
        Origins:
        - DomainName: !Join ['', [!Ref DomainName, .s3.amazonaws.com]]
          Id: S3Origin
          S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true # deploy the distribution
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        Aliases:
          - !Ref 'DomainName'
          - !Join ['.', [www, !Ref DomainName]] # route "www" version of domain to cloudfront as well
        DefaultCacheBehavior: # some defaults, not too important
          AllowedMethods:
          - GET
          - HEAD
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn # allow https
          SslSupportMethod: sni-only
        CustomErrorResponses: # want to direct any CF Distribution traffic to the S3 Bucket/React app
        - ErrorCachingMinTTL: 300
          ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html

  HostedZone: 
    Type: AWS::Route53::HostedZone
    Properties: 
      HostedZoneConfig: 
        Comment: 'Hosted zone for my personal website and blog'
      Name: !Ref DomainName

  DNS: # allow access to React app via <DomainName>
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
      - Name: !Ref 'DomainName'
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
          DNSName: !GetAtt [CloudFrontDistribution, DomainName]

  DNSWithWWW: # allow access to React app via <FullDomainName>
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
      - Name: !Join ['.', [www, !Ref DomainName]]
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
          DNSName: !GetAtt [CloudFrontDistribution, DomainName]

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - Bucket
      - WebsiteURL
    Description: The URL for the S3 bucket.
  CloudFrontDistributionEndpoint:
      Value: !GetAtt [CloudFrontDistribution, DomainName]
      Description: The DomainName for CloudFront distribution. This is NOT the CloudFront distribution ID. Use this DomainName to find the distribution ID in the CloudFormation or CloudFront console.
  Domain:
    Value: !Ref DomainName
    Description: The custom domain.
  FullDomain:
    Value: !Join ['.', [www, !Ref DomainName]]
    Description: The custom full domain.
  ApiDomain:
    Value: !Join ['.', [api, !Ref DomainName]]
    Description: The custom API domain.
  APIKey:
    Value: !GetAtt [PersonalWebsiteApiApiKey , APIKeyId]
    Description: The resource ID for the API Key. This is NOT the actual API key. Use this ID to find the key in the CloudFormation or API Gateway console.
