AWSTemplateFormatVersion: 2010-09-09
Description: >-
  website

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Huge thanks to Ryan Yost. Check out his repo...
# https://github.com/ryanjyost/react-spa-starter
Parameters:
  DomainName:
    Type: String
    Description: The domain name including the TLD. Example = YourWebsite.com
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a domain name including the TLD.
  AcmCertificateArn:
    Type: String
    Description: The Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate. Example = arn:aws:acm:[resource_id_here]
    AllowedPattern: "arn:aws:acm:.*"
    ConstraintDescription: Must be the ARN for the ACM certificate.
  AWSRegion:
    Type: String
    Default: us-east-1
    Description: The AWS Region Code for the AWS Region where resources will be provisioned. Example = us-east-1
    AllowedPattern: (us(-gov)?|ap|ca|cn|eu|sa)-(central|(north|south)?(east|west)?)-\d
    ConstraintDescription: Must be an AWS Region Code
    
Globals:
  Function:
    CodeUri: sam/.
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 180
    Environment:
      Variables:
        BLOG_TABLE: !Ref PersonalWebsiteTable

Resources:
  PersonalWebsiteApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: The default usage plan for this API
          Throttle:
            BurstLimit: 100
            RateLimit: 50
      Cors:
        AllowMethods: "'DELETE,GET,OPTIONS,POST'"
        AllowHeaders: "'Accept,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Forwarded-For'"
        AllowOrigin: "'*'" 
        # Switch AllowOrigin to your custom domain whenever not developing on localhost
        # !Sub
        #   - "'https://www.${Domain}'"
        #   - Domain: !Ref DomainName
      Domain:
        DomainName: !Join ['.', [api, !Ref DomainName]]
        CertificateArn: !Ref AcmCertificateArn
        EndpointConfiguration: EDGE
        Route53: 
          HostedZoneId: !Ref HostedZone
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50
          # Enable these to get Execution Logs in CloudWatch (you will also need to make an IAM role for this)
          # DataTraceEnabled: true
          # LoggingLevel: INFO

  PersonalWebsiteTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PersonalWebsite
      AttributeDefinitions:
        - AttributeName: PartitionKey
          AttributeType: S
      KeySchema:
        - AttributeName: PartitionKey
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # LambdaLibs:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: lambda-layer-lib
  #     Description: Dependencies for the lambda functions, seperate from the react frontend
  #     ContentUri: lambda-lib/.
  #     CompatibleRuntimes:
  #       - nodejs14.x
  #   Metadata:
  #     BuildMethod: makefile

  GetAllArticlesLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/blogLambdas.getAllArticles
      Description: Get all the blog articles
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog/all
            Method: GET
            Auth:
              ApiKeyRequired: true

  GetArticleByTitleLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/blogLambdas.getArticleByTitle
      Description: Get the blog article given its URL encoded title
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog
            Method: GET
            Auth:
              ApiKeyRequired: true
  
  UpsertArticleLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/blogLambdas.upsertArticle
      Description: Upsert a blog article
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog
            Method: POST
            Auth:
              ApiKeyRequired: true
  
  DeleteArticleLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/blogLambdas.deleteArticle
      Description: Delete the blog article
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog
            Method: DELETE 
            Auth:
              ApiKeyRequired: true

  UpsertCommentLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/commentLambdas.upsertComment
      Description: Upsert a comment for a blog article
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog/comment
            Method: POST
            Auth:
              ApiKeyRequired: true

  UpsertCommentReplyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/commentLambdas.upsertCommentReply
      Description: Upsert a comment reply for a blog article
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog/comment/reply
            Method: POST
            Auth:
              ApiKeyRequired: true

  DeleteCommentLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/commentLambdas.deleteComment
      Description: Delete a comment in a blog article
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog/comment
            Method: DELETE
            Auth:
              ApiKeyRequired: true

  DeleteCommentReplyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Layers:
      #   - !Ref LambdaLibs
      Handler: handlers/commentLambdas.deleteCommentReply
      Description: Delete a comment in a blog article
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalWebsiteTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PersonalWebsiteApi
            Path: /blog/comment/reply
            Method: DELETE
            Auth:
              ApiKeyRequired: true

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket, /*]]

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
    - Bucket # don't create cf distribution until S3 Bucket has been created
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to S3 website
        Origins:
        - DomainName: !Join ['', [!Ref DomainName, .s3-website., !Ref AWS::Region, .amazonaws.com]] 
          Id: CustomS3WebsiteOrigin
          CustomOriginConfig:
            OriginProtocolPolicy: http-only  # S3 buckets configured as a website can't use HTTPS
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        Aliases:
          - !Ref 'DomainName'
          - !Join ['.', [www, !Ref DomainName]]
        DefaultCacheBehavior: # some defaults, not too important
          AllowedMethods:
          - GET
          - HEAD
          Compress: true
          TargetOriginId: CustomS3WebsiteOrigin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn # allow https
          SslSupportMethod: sni-only
        # CustomErrorResponses: # redirects any CF Distribution traffic to S3 Bucket
        # - ErrorCachingMinTTL: 300
        #   ErrorCode: 404
        #   ResponseCode: 200
        #   ResponsePagePath: /index.html

  HostedZone: 
    Type: AWS::Route53::HostedZone
    Properties: 
      HostedZoneConfig: 
        Comment: 'Hosted zone for my personal website and blog'
      Name: !Ref DomainName

  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
      - Name: !Ref 'DomainName'
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
          DNSName: !GetAtt [CloudFrontDistribution, DomainName]

  DNSWithWWW:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
      - Name: !Join ['.', [www, !Ref DomainName]]
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
          DNSName: !GetAtt [CloudFrontDistribution, DomainName]

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - Bucket
      - WebsiteURL
    Description: The URL for the S3 bucket.
  CloudFrontDistributionEndpoint:
      Value: !GetAtt [CloudFrontDistribution, DomainName]
      Description: The DomainName for CloudFront distribution. This is NOT the CloudFront distribution ID. Use this DomainName to find the distribution ID in the CloudFormation or CloudFront console.
  Domain:
    Value: !Ref DomainName
    Description: The custom domain.
  FullDomain:
    Value: !Join ['.', [www, !Ref DomainName]]
    Description: The custom full domain.
  ApiDomain:
    Value: !Join ['.', [api, !Ref DomainName]]
    Description: The custom API domain.
  APIKey:
    Value: !GetAtt [PersonalWebsiteApiApiKey , APIKeyId]
    Description: The resource ID for the API Key. This is NOT the actual API key. Use this ID to find the key in the CloudFormation or API Gateway console.
